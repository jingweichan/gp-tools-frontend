{"version":3,"sources":["containers/HmacCalculatorPage/index.tsx","App.tsx","serviceWorker.js","index.js"],"names":["HmacCalculatorPage","_useQueryParams","useQueryParams","contentType","StringParam","headerDate","method","partnerSecret","requestBody","requestUrl","_useQueryParams2","Object","slicedToArray","params","setParams","_useState","useState","_useState2","result","setResult","useEffect","Date","toUTCString","computeResults","useCallback","headerContentType","requestData","CryptoJS","enc","Base64","stringify","SHA256","join","HmacSHA256","generateHmacSignature","handleChange","e","newParams","objectSpread","defineProperty","target","name","value","react_default","a","createElement","Fragment","className","htmlFor","id","onChange","required","type","placeholder","rows","onClick","App","react_router_dom","basename","esm","ReactRouterRoute","Route","to","react_router","path","component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.9c6d00a2.chunk.js","sourcesContent":["import CryptoJS from 'crypto-js';\nimport React, { ChangeEvent, useCallback, useEffect, useState } from 'react';\nimport { StringParam, useQueryParams } from 'use-query-params';\n\nconst generateHmacSignature = (\n  method: string,\n  headerContentType: string,\n  headerDate: string,\n  requestUrl: string,\n  requestBody: string,\n  partnerSecret: string,\n) => {\n  if (!partnerSecret) {\n    return '';\n  }\n\n  if (method === 'GET' || !requestBody) {\n    requestBody = '';\n  }\n\n  const hashedPayload = requestBody\n    ? CryptoJS.enc.Base64.stringify(CryptoJS.SHA256(requestBody))\n    : '';\n\n  const requestData = [\n    [method, headerContentType, headerDate, requestUrl, hashedPayload].join(\n      '\\n',\n    ),\n    '\\n',\n  ].join('');\n\n  const hmacDigest = CryptoJS.enc.Base64.stringify(\n    CryptoJS.HmacSHA256(requestData, partnerSecret),\n  );\n\n  return hmacDigest;\n};\n\nconst HmacCalculatorPage = () => {\n  const [params, setParams] = useQueryParams({\n    contentType: StringParam,\n    headerDate: StringParam,\n    method: StringParam,\n    partnerSecret: StringParam,\n    requestBody: StringParam,\n    requestUrl: StringParam,\n  });\n\n  const [result, setResult] = useState('');\n\n  useEffect(() => {\n    setParams({\n      contentType: params.contentType || 'application/json',\n      headerDate: params.headerDate || new Date().toUTCString(),\n      method: params.method || 'POST',\n      partnerSecret: params.partnerSecret || '',\n      requestBody: params.requestBody || `{\"foo\":\"bar\",\"baz\":\"lol\",\"kek\":168}`,\n      requestUrl: params.requestUrl || '/relative-path',\n    });\n    // eslint-disable-next-line\n  }, []);\n\n  const computeResults = useCallback(() => {\n    setResult(\n      generateHmacSignature(\n        params.method as string,\n        params.contentType as string,\n        params.headerDate as string,\n        params.requestUrl as string,\n        params.requestBody as string,\n        params.partnerSecret as string,\n      ),\n    );\n  }, [params]);\n\n  useEffect(() => {\n    computeResults();\n  }, [computeResults, params]);\n\n  const handleChange = (\n    e: ChangeEvent<HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement>,\n  ) => {\n    const newParams = { ...params, [e.target.name]: e.target.value };\n    setParams(newParams, 'push');\n  };\n\n  return (\n    <>\n      <h1>HMAC Calculator</h1>\n      <form>\n        <div className=\"form-group row\">\n          <label className=\"col-form-label col-sm-4\" htmlFor=\"partner-secret\">\n            Secret\n          </label>\n          <div className=\"col-sm-8\">\n            <input\n              className=\"form-control\"\n              id=\"partner-secret\"\n              name=\"partnerSecret\"\n              onChange={handleChange}\n              required\n              type=\"text\"\n              value={params.partnerSecret}\n            />\n          </div>\n        </div>\n        <div className=\"form-group row\">\n          <label className=\"col-form-label col-sm-4\" htmlFor=\"method\">\n            Method\n          </label>\n          <div className=\"col-sm-8\">\n            <select\n              className=\"custom-select\"\n              id=\"method\"\n              name=\"method\"\n              onChange={handleChange}\n              value={params.method}\n            >\n              <option value=\"POST\">POST</option>\n              <option value=\"GET\">GET</option>\n            </select>\n          </div>\n        </div>\n        <div className=\"form-group row\">\n          <label className=\"col-form-label col-sm-4\" htmlFor=\"content-type\">\n            Header Content Type\n          </label>\n          <div className=\"col-sm-8\">\n            <input\n              className=\"form-control\"\n              id=\"content-type\"\n              name=\"contentType\"\n              onChange={handleChange}\n              type=\"text\"\n              value={params.contentType}\n            />\n          </div>\n        </div>\n        <div className=\"form-group row\">\n          <label className=\"col-form-label col-sm-4\" htmlFor=\"header-date\">\n            Header Date\n          </label>\n          <div className=\"col-sm-8\">\n            <input\n              className=\"form-control\"\n              id=\"header-date\"\n              name=\"headerDate\"\n              onChange={handleChange}\n              type=\"text\"\n              value={params.headerDate}\n            />\n          </div>\n        </div>\n        <div className=\"form-group row\">\n          <label className=\"col-form-label col-sm-4\" htmlFor=\"request-url\">\n            Request URL\n          </label>\n          <div className=\"col-sm-8\">\n            <input\n              className=\"form-control\"\n              id=\"request-url\"\n              name=\"requestUrl\"\n              onChange={handleChange}\n              type=\"text\"\n              placeholder=\"/relative-path\"\n              value={params.requestUrl}\n            />\n          </div>\n        </div>\n        <div className=\"form-group row\">\n          <label className=\"col-form-label col-sm-4\" htmlFor=\"request-body\">\n            Request Body\n            <br />\n            (JSON stringified)\n          </label>\n          <div className=\"col-sm-8\">\n            <textarea\n              className=\"form-control monospace\"\n              id=\"request-body\"\n              name=\"requestBody\"\n              onChange={handleChange}\n              rows={3}\n              value={params.requestBody}\n            />\n          </div>\n        </div>\n        <button\n          className=\"btn btn-primary\"\n          id=\"submit-btn\"\n          onClick={computeResults}\n          type=\"button\"\n        >\n          Calculate HMAC\n        </button>\n        <hr />\n        <h3>Result</h3>\n        <pre>\n          <code>{result}</code>\n        </pre>\n      </form>\n    </>\n  );\n};\n\nexport default HmacCalculatorPage;\n","import React from 'react';\nimport {\n  Link,\n  Redirect,\n  Route,\n  BrowserRouter as Router,\n  Switch,\n} from 'react-router-dom';\nimport { QueryParamProvider } from 'use-query-params';\n\nimport HmacCalculatorPage from './containers/HmacCalculatorPage';\n\nconst App = () => {\n  return (\n    <Router basename=\"/gp-tools-frontend\">\n      <QueryParamProvider ReactRouterRoute={Route}>\n        <Link to=\"/hmac\">HMAC Calculator</Link> | Pop Signature Calculator\n        <Switch>\n          <Route path=\"/hmac\" component={HmacCalculatorPage} />\n          <Redirect to=\"/hmac\" />\n        </Switch>\n      </QueryParamProvider>\n    </Router>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}